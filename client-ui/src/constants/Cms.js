export default {
  DEFAULT_IMAGE_URL:
    "https://prod-content-data.s3.ap-south-1.amazonaws.com/content/yoga-poses.jpg",
  TECH_STACK:
    '<div style="text-align: center;"><font face="Comic Sans MS" size="6">Wondering about Architecture of justyoga.fit ?&nbsp;</font></div><div><font face="Comic Sans MS" size="6"><br></font></div><div><br></div><div><div style="display: grid;height: 100%;"><img src="https://qa-content-data.s3.ap-south-1.amazonaws.com/60363b2a-41d1-4ade-ab6f-988812d31584/30e55b8e-2d41-4cdb-9f50-37c56863100f" style="max-width: 100%;max-height: 100%;margin: auto;object-fit: contain" id="60363b2a-41d1-4ade-ab6f-988812d31584/30e55b8e-2d41-4cdb-9f50-37c56863100f"></div></div><div><font size="4"><br></font></div><div><font size="4">We have developed our backend on micro-service architecture. There are 15 microservices which are running in docker on AWS servers. All the micro-services are developed with spring boot framework. We have used spring cloud tools:</font><br></div><div><div style="display: grid; height: 49px;"><ul><li><font size="4">We use</font>d <span style="font-size: large;">zuul</span><span style="font-size: large;"> as an </span><b style="font-size: large;">api gateway</b><span style="font-size: large;">, so all the traffic from web or mobile channel goes through this and spring-cloud-zuul-ratelimit were used to enable rate limit per service in Netflix Zuul.</span></li></ul><ul><li><font size="4">Spring Cloud<b> Config Server</b> provides an HTTP resource-based API for external configuration (name-value pairs or equivalent YAML content). We used config server as a central place for configuration of micro-services. With actuator we can refresh configuration at runtime without deploying the services.</font></li></ul><ul><li><font size="4">For <b>service discovery</b>, eureka is used that&nbsp;set up a service registry and then all services registers itself with the registry and uses it to resolve its own host. A service registry is useful because it enables client-side load-balancing and decouples service providers from consumers without the need for DNS.</font></li></ul><img src="https://qa-content-data.s3.ap-south-1.amazonaws.com/60363b2a-41d1-4ade-ab6f-988812d31584/2685809c-e92a-4a55-b244-6eeca1ba8aaa" id="60363b2a-41d1-4ade-ab6f-988812d31584/2685809c-e92a-4a55-b244-6eeca1ba8aaa" style="max-width: 100%; max-height: 100%; margin: auto; object-fit: contain;"><ul><li><font size="4">We have implemented <b style="">circuit breaker</b> pattern with the help of spring cloud hystrix. Use of the Circuit Breaker pattern can let a microservice continue operating when a related service fails, preventing the failure from cascading and giving the failing service time to recover.</font></li></ul><div><font size="5"><br></font></div><div><font size="5"><br></font></div><div><font size="5">Distributed Tracing</font></div><div><br></div><div><font size="4">In order to enable distributed tracing in the microservice architecture we used spring cloud sleuth together with zipkin which helps us to track apis calls between microservices.&nbsp;It helps gather timing data needed to troubleshoot latency problems in service architectures.</font></div><div><font size="4"><br></font></div><div><div style="display: grid;height: 100%;"><img src="https://qa-content-data.s3.ap-south-1.amazonaws.com/60363b2a-41d1-4ade-ab6f-988812d31584/2e357841-0828-4610-b866-9c5c4419ccd2" style="max-width: 100%;max-height: 100%;margin: auto;object-fit: contain" id="60363b2a-41d1-4ade-ab6f-988812d31584/2e357841-0828-4610-b866-9c5c4419ccd2"></div></div><div><br></div><div><font size="5"><br></font></div><div><font size="5"><br></font></div><div><font size="5">Logging</font></div><div><br></div><div><font size="4">We are using ELK stack, these three open source tools â€” Elasticsearch, Logstash and Kibana form the ELK stack. They are used for searching, analyzing, and visualizing log data in real-time.</font></div><div><font size="4"><br></font></div><div><div style="display: grid;height: 100%;"><img src="https://qa-content-data.s3.ap-south-1.amazonaws.com/60363b2a-41d1-4ade-ab6f-988812d31584/f96acbee-6737-4ed2-b318-5421629cca3e" style="max-width: 100%;max-height: 100%;margin: auto;object-fit: contain" id="60363b2a-41d1-4ade-ab6f-988812d31584/f96acbee-6737-4ed2-b318-5421629cca3e"></div></div><div><br></div><div><font size="5"><br></font></div><div><font size="5"><br></font></div><div><font size="5">Database</font></div><div><font size="5"><br></font></div><div><font size="4">Each microservice has its own independent database. Mysql is used to store relational data across all the services. <b>Flyway</b> is used continuously remodel our application\'s database schema reliably and easily.</font></div><div><br></div><div><font size="5"><br></font></div><div><font size="5"><br></font></div><div><font size="5">Caching</font></div><div><font size="5"><br></font></div><div><font size="4">Redis is used as a central cache for all the micrservices. Cache is updated in real time.</font></div><div><br></div><div><font size="5"><br></font></div><div><font size="5"><br></font></div><div><font size="5">Event driven architecture</font></div><div><br></div><div><font size="4">For communication between microservices messages are exchanged between services through kafka. This prevents synchronous api calls and circular dependencies between services and makes the architecture more scalable.</font></div><div><br></div><div><font size="5"><br></font></div><div><font size="5"><br></font></div><div><font size="5">Rest Clients</font></div><div><br></div><div><font size="4">To make rest call between microservices, clients are developed which can be reused at multiple places. <b style="">Feign client</b> (declarative rest client) is used to develop rest clients.</font></div><div><br></div><div><font size="5"><br></font></div><div><font size="5"><br></font></div><div><font size="5">Monitoring</font></div><div><font size="4"><br></font></div><div><font size="4">Spring actuator which uses micrometer together with promethius and grafana are used to visualize our metrics data.</font></div><div><font size="4"><br></font></div><div><div style="display: grid;height: 100%;"><img src="https://qa-content-data.s3.ap-south-1.amazonaws.com/60363b2a-41d1-4ade-ab6f-988812d31584/6bcdec2d-8339-473a-b55c-186c328e467b" style="max-width: 100%;max-height: 100%;margin: auto;object-fit: contain" id="60363b2a-41d1-4ade-ab6f-988812d31584/6bcdec2d-8339-473a-b55c-186c328e467b"></div></div><div><br></div><div><br></div><div><br></div><div><font size="5">Frontend</font></div><div><br></div><div><font size="4">Frontend (web and mobile app) is build on <b>Quasar</b> based on <b>vue.js </b>because it saves development costs drastically. Web is fully server side rendered (SSR) for SEO.&nbsp;</font></div><div><font size="4">With help of quasar we just need to write code once and simultaneously deploy it as a website, a Mobile App and/or an Electron App. Yes, one codebase for all of them, helping you develop an app in record time by using a state-of-the-art CLI and backed by best-practice, blazing fast Quasar web components.</font><br></div><div><br></div><div><br></div><div><br></div><blockquote><i style=""><font size="5" style="" face="Comic Sans MS"><b style="">Yes we are a bunch of technology geeks who are solving the problems of yogis through technology.</b></font></i></blockquote><blockquote><i style=""><font size="5" style="" face="Comic Sans MS"><b style=""><br></b></font></i></blockquote><blockquote><i style=""><font size="5" style="" face="Comic Sans MS"><b style=""><br></b></font></i></blockquote><div><i style="font-family: Arial; font-size: x-large;"><br></i></div><div><i style="font-family: Arial; font-size: x-large;"><br></i></div><div><br></div><div><br></div><div><br></div></div></div>'
};
